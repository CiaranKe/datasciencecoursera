names(data) <- gsub('Gyro', 'AngularSpeed', names(data))
names(data) <- gsub('Mag', 'Magnitude', names(data))
names(data) <- gsub('-mean', 'Mean', names(data))
names(data) <- gsub('Freq-', 'Frequency-', names(data))
names(data) <- gsub('Freq$', 'Frequency', names(data))
return (data)
}
results2 <- run_analysis()
library(dplyr)
library(tidyr)
X_TEST <- 'UCI HAR Dataset/test/X_test.txt'
X_TRAIN <- 'UCI HAR Dataset/train/X_train.txt'
Y_TEST <- 'UCI HAR Dataset/test/Y_test.txt'
Y_TRAIN <- 'UCI HAR Dataset/train/Y_train.txt'
SUB_TEST <- 'UCI HAR Dataset/test/subject_test.txt'
SUB_TRAIN <- 'UCI HAR Dataset/train/subject_train.txt'
FEATURES <- 'UCI HAR Dataset/features.txt'
ACTIVITY_LABELS <- 'UCI HAR Dataset/activity_labels.txt'
CHAR <- 'character'
ACTIVITY_ID <- 'ActivityID'
ACTIVITY_NAME <- 'Activity'
FEATURE_ID <- 'FeatureId'
FEATURE_NAME <- 'Feature'
SUBJECT_NAME <- 'Subject'
EXPRESION_COLS <- '(mean)|(std)|(Subject)'
EXPRESION_BRACES <- '\\(|\\)'
NOTHING <- ''
run_analysis <- function() {
data <- mergeDataSets(getDataSet(),getDataLabels(),getSubjects())
data <- setDataLabels(data, getFeatureLabels()$Feature)
data <- limitCols(data)
data <- labelActivities(data)
data <- summarise_each(group_by(data, Activity,Subject), funs(mean))
data
}
#Merge the datasets
mergeDataSets <- function(data, labels, subjects) {
mergedData <- cbind(cbind(data, subjects), labels)
return (mergedData)
}
#Get the Training and test data sets and merge them
getDataSet <- function(){
testDataX <- read.table(X_TEST, header = FALSE)
trainDataX <- read.table(X_TRAIN, header = FALSE)
X <- rbind(testDataX, trainDataX)
rm(testDataX)
rm(trainDataX)
return (X)
}
#Get the Training and test labels and merge them
getDataLabels <- function(){
testDataY <- read.table(Y_TEST, header = FALSE);
trainDataY <- read.table(Y_TRAIN, header = FALSE);
Y <- rbind(testDataY, trainDataY)
rm(testDataY)
rm(trainDataY)
return (Y)
}
#Get the Training and test labels and merge them
getSubjects <- function(){
testSubject <- read.table(SUB_TEST, header = FALSE);
trainSubject <- read.table(SUB_TRAIN, header = FALSE);
subject <- rbind(testSubject, trainSubject)
rm(testSubject)
rm(trainSubject)
return (subject)
}
#get the list of all features
getFeatureLabels <- function (){
features <- read.table(FEATURES, colClasses = c(CHAR), col.names =
c(FEATURE_ID, FEATURE_NAME))
features <- rbind(rbind(features, c(562, SUBJECT_NAME)),
c(563, ACTIVITY_ID))
return (features)
}
#get the activity labels
getActivityLabels <- function (){
activityLabels <- read.table(ACTIVITY_LABELS, col.names =
c(ACTIVITY_ID, ACTIVITY_NAME))
return (activityLabels)
}
#Label the data
setDataLabels <- function(data, labels) {
names(data) <- labels
return (data)
}
#Limit data columns to Mean and Std Dev
limitCols <- function(data) {
selectedCols <- grepl(EXPRESION_COLS, names(data))
data <- inner_join(data, getActivityLabels(), by=ACTIVITY_ID)
data <- data[,selectedCols]
return (data)
}
labelActivities <- function(data) {
names(data) <- gsub(EXPRESION_BRACES, NOTHING, names(data))
names(data) <- gsub('^t', 'Time', names(data))
names(data) <- gsub('^f', 'Frequency', names(data))
names(data) <- gsub('Acc', 'Acceleration', names(data))
names(data) <- gsub('GyroJerk', 'AngularAcceleration', names(data))
names(data) <- gsub('Gyro', 'AngularSpeed', names(data))
names(data) <- gsub('Mag', 'Magnitude', names(data))
names(data) <- gsub('-mean', 'Mean', names(data))
names(data) <- gsub('Freq-', 'Frequency-', names(data))
names(data) <- gsub('Freq$', 'Frequency', names(data))
return (data)
}
results2 <- run_analysis()
?write.table
library(dplyr)
library(tidyr)
X_TEST <- 'UCI HAR Dataset/test/X_test.txt'
X_TRAIN <- 'UCI HAR Dataset/train/X_train.txt'
Y_TEST <- 'UCI HAR Dataset/test/Y_test.txt'
Y_TRAIN <- 'UCI HAR Dataset/train/Y_train.txt'
SUB_TEST <- 'UCI HAR Dataset/test/subject_test.txt'
SUB_TRAIN <- 'UCI HAR Dataset/train/subject_train.txt'
FEATURES <- 'UCI HAR Dataset/features.txt'
ACTIVITY_LABELS <- 'UCI HAR Dataset/activity_labels.txt'
CHAR <- 'character'
ACTIVITY_ID <- 'ActivityID'
ACTIVITY_NAME <- 'Activity'
FEATURE_ID <- 'FeatureId'
FEATURE_NAME <- 'Feature'
SUBJECT_NAME <- 'Subject'
EXPRESION_COLS <- '(mean)|(std)|(Subject)'
EXPRESION_BRACES <- '\\(|\\)'
NOTHING <- ''
run_analysis <- function(write.file=FALSE, file.name='TidyData.csv' ) {
#main function combines the traininng and test datasets returns a
#tidy dataset
#saves dataset to file or returns dataset based on user input.
#get the datasets and merge them
data <- mergeDataSets(combineDataSet(X_TEST,X_TRAIN),
combineDataSet(Y_TEST,Y_TRAIN),
combineDataSet(SUB_TEST,SUB_TRAIN))
#combine the X and Y labels for the datasets
data <- setDataLabels(data, getFeatureLabels()$Feature)
#limit the columns in the dataset to the mean and Std Variations
data <- limitCols(data)
# rename the columns to with appropriate names.
data <- labelActivities(data)
# return a dataset containing the mean of the mean/std dev variables
# by activity and subject.
data <- summarise_each(group_by(data, Activity,Subject), funs(mean))
if(write.file){
write.table(data, file=file.name, sep = ",")
}
else{
return(data)
}
}
mergeDataSets <- function(data, labels, subjects) {
# combine the X, Y and subject datasets
mergedData <- cbind(cbind(data, subjects), labels)
return (mergedData)
}
combineDataSet <- function(test_in, train_in){
#Get the Training and test data sets and merge them
test <- read.table(test_in, header = FALSE)
train <- read.table(train_in, header = FALSE)
combined <- rbind(test, train)
rm(test)
rm(train)
return (combined)
}
getFeatureLabels <- function (){
#read in the current list of features from file
features <- read.table(FEATURES, colClasses = c(CHAR), col.names =
c(FEATURE_ID, FEATURE_NAME))
#add our subject and activityid column names
features <- rbind(rbind(features, c(562, SUBJECT_NAME)),
c(563, ACTIVITY_ID))
return (features)
}
getActivityLabels <- function (){
#read in the list of activities from disk
activityLabels <- read.table(ACTIVITY_LABELS, col.names =
c(ACTIVITY_ID, ACTIVITY_NAME))
#return them
return (activityLabels)
}
setDataLabels <- function(data, labels) {
#apply the column (feature) names to the merged dataset
names(data) <- labels
return (data)
}
limitCols <- function(data) {
#Limit data columns to Mean and Standard deviation
#get the list of columns we are interested in
selectedCols <- grepl(EXPRESION_COLS, names(data))
#add the activity labels to the dataset
data <- inner_join(data, getActivityLabels(), by=ACTIVITY_ID)
#remove the uneeded columns
data <- data[,selectedCols]
return (data)
}
labelActivities <- function(data) {
#tidy up the column names
names(data) <- gsub(EXPRESION_BRACES, NOTHING, names(data))
names(data) <- gsub('^t', 'Time', names(data))
names(data) <- gsub('^f', 'Frequency', names(data))
names(data) <- gsub('Acc', 'Acceleration', names(data))
names(data) <- gsub('GyroJerk', 'AngularAcceleration', names(data))
names(data) <- gsub('Gyro', 'AngularSpeed', names(data))
names(data) <- gsub('Mag', 'Magnitude', names(data))
names(data) <- gsub('-mean', 'Mean', names(data))
names(data) <- gsub('Freq-', 'Frequency-', names(data))
names(data) <- gsub('Freq$', 'Frequency', names(data))
return (data)
}
run_analysis(write.file=T)
dir()
library(dplyr)
library(tidyr)
run_analysis <- function() {
## This function acts as the driver, responsible for combining the composite training and test datasets and
## returning the mean of each of the "mean/stddev" variables in a tidy dataset.
## Setup filename locations.
column_names_file <- "UCI HAR Dataset/features.txt"; activity_labels_file <- "UCI HAR Dataset/activity_labels.txt"
## Read in the names of the variables and the names of the activities used.
measurement_names <- prepare_column_names(column_names_file)
activity_names <- prepare_activity_labels(activity_labels_file)
## Prepare the test category dataset, combining the results, activities and subject.
result_file <- "UCI HAR Dataset/test/X_test.txt"; activity_file <- "UCI HAR Dataset/test/y_test.txt"; subject_file <- "UCI HAR Dataset/test/subject_test.txt"
test_category <- prepare_category_results(result_file, activity_file, subject_file, activity_names, measurement_names)
## Prepare the training category dataset, combining the results, activities and subject.
result_file <- "UCI HAR Dataset/train/X_train.txt"; activity_file <- "UCI HAR Dataset/train/y_train.txt"; subject_file <- "UCI HAR Dataset/train/subject_train.txt"
train_category <- prepare_category_results(result_file,activity_file,subject_file,activity_names,measurement_names)
## Combine the test and training and extract only those columns for mean or standard devation figures.
test_and_train_mean_std_vars <- return_clean_mean_std_vars_only(rbind(test_category, train_category))
## Return a tidy dataset containing the mean of the mean/std dev variables, by activity and subject.
return(return_mean_by_activity_and_subject(test_and_train_mean_std_vars))
}
return_mean_by_activity_and_subject <- function(dataframe) {
names(dataframe) <- gsub('mean', 'Mean', names(dataframe))
names(dataframe) <- gsub('std', 'StdDeviation', names(dataframe))
return(summarise_each(group_by(dataframe, activity_name, subject), funs(mean)))
}
return_clean_mean_std_vars_only <- function(all_vars) {
## This function extracts only the variables for mean or standard devation and include the subject and activity name.
## The column names are then renamed to include a meaningful prefix, for the final tidy dataset.
subset_vars_df <- select(all_vars, matches("(subject)+|(activity_name)+|(mean)+|(std)+", ignore.case = FALSE))
col_names_df <- data.frame(colname = colnames(subset_vars_df))
enriched_df <- mutate(col_names_df, colnameadjusted = paste("AverageOf", colname, sep=''))
colnames(subset_vars_df)[2:(ncol(subset_vars_df)-1)] <- enriched_df[2:(nrow(enriched_df)-1),"colnameadjusted"]
return(subset_vars_df)
}
prepare_column_names <- function(column_names_file) {
tempdf<-(as.data.frame(mutate(tbl_df(read.table(column_names_file, header = FALSE, sep = "")), unique_col = gsub("[^0-9A-Za-z///' ]", "",V2))))
newdf <- mutate(tbl_df(tempdf), unique_col = gsub('^t', 'Time', unique_col))
newdf <- mutate(tbl_df(newdf), unique_col = gsub('^f', 'Frequency', unique_col))
newdf <- mutate(tbl_df(newdf), unique_col = gsub('Acc', 'Acceleration', unique_col))
newdf <- mutate(tbl_df(newdf), unique_col = gsub('Mag', 'Magnitude', unique_col))
newdf <- mutate(tbl_df(newdf), unique_col = gsub('GyroJerk', 'AngularAcceleration', unique_col))
newdf <- mutate(tbl_df(newdf), unique_col = gsub('Gyro', 'AngularSpeed', unique_col))
return(as.data.frame(newdf))
}
prepare_activity_labels <- function(activity_labels_file) {
return(tbl_df(read.table(activity_labels_file, header = FALSE, sep = "",col.names=c("activity_id", "activity_name"))))
}
prepare_category_results <- function(result_file, activity_file, subject_file, activity_labels, measurement_names) {
result_data <- read.table(result_file, header = FALSE, sep = "")
## Rename the columns to their meaningful names.
colnames(result_data) <- measurement_names[,3]
## Read in exercise labelling data.
activities <- read.table(activity_file, header = FALSE, sep = "")
## Add the activity of the test to the dataset in the first column.
activity_result_data <- cbind(activities, result_data)
## Rename the activity ID column to something more appropriate.
colnames(activity_result_data)[1] <- "activity_id"
## Join the activity reference data set with the activity test data set
enriched_activity_df <- as.data.frame(inner_join(activity_result_data, activity_labels, by ="activity_id" ))
## Read in the subjects involved in the event.
subjects <- read.table(subject_file, header = FALSE, sep = "")
## Add the subject of the test to the dataset in the first column
subject_activity_data <- cbind(subjects, enriched_activity_df)
## Rename the first column to something appropriate
colnames(subject_activity_data)[1] <- "subject"
## Unduplicated column names provided in Features.txt: 561
## Dedpulicated column names returned by function below: 477
## Total duplicate columns in dataset: 84
return(subject_activity_data[, !duplicated(colnames(subject_activity_data))])
}
write.table(run_analysis(), file='TidyData2', sep=",")
library(dplyr)
library(tidyr)
X_TEST <- 'UCI HAR Dataset/test/X_test.txt'
X_TRAIN <- 'UCI HAR Dataset/train/X_train.txt'
Y_TEST <- 'UCI HAR Dataset/test/Y_test.txt'
Y_TRAIN <- 'UCI HAR Dataset/train/Y_train.txt'
SUB_TEST <- 'UCI HAR Dataset/test/subject_test.txt'
SUB_TRAIN <- 'UCI HAR Dataset/train/subject_train.txt'
FEATURES <- 'UCI HAR Dataset/features.txt'
ACTIVITY_LABELS <- 'UCI HAR Dataset/activity_labels.txt'
CHAR <- 'character'
ACTIVITY_ID <- 'ActivityID'
ACTIVITY_NAME <- 'Activity'
FEATURE_ID <- 'FeatureId'
FEATURE_NAME <- 'Feature'
SUBJECT_NAME <- 'Subject'
EXPRESION_COLS <- '(mean)|(std)|(Subject)'
EXPRESION_BRACES <- '\\(|\\)'
NOTHING <- ''
run_analysis <- function(write.file=FALSE, file.name='TidyData.csv' ) {
#main function combines the traininng and test datasets returns a
#tidy dataset
#saves dataset to file or returns dataset based on user input.
#get the datasets and merge them
data <- mergeDataSets(combineDataSet(X_TEST,X_TRAIN),
combineDataSet(Y_TEST,Y_TRAIN),
combineDataSet(SUB_TEST,SUB_TRAIN))
#combine the X and Y labels for the datasets
data <- setDataLabels(data, getFeatureLabels()$Feature)
#limit the columns in the dataset to the mean and Std Variations
data <- limitCols(data)
# rename the columns to with appropriate names.
data <- labelActivities(data)
# return a dataset containing the mean of the mean/std dev variables
# by activity and subject.
data <- summarise_each(group_by(data, Activity,Subject), funs(mean))
if(write.file){
write.table(data, file=file.name, sep = ',', row.names=F)
}
else{
return(data)
}
}
mergeDataSets <- function(data, labels, subjects) {
# combine the X, Y and subject datasets
mergedData <- cbind(cbind(data, subjects), labels)
return (mergedData)
}
combineDataSet <- function(test_in, train_in){
#Get the Training and test data sets and merge them
test <- read.table(test_in, header = FALSE)
train <- read.table(train_in, header = FALSE)
combined <- rbind(test, train)
rm(test)
rm(train)
return (combined)
}
getFeatureLabels <- function (){
#read in the current list of features from file
features <- read.table(FEATURES, colClasses = c(CHAR), col.names =
c(FEATURE_ID, FEATURE_NAME))
#add our subject and activityid column names
features <- rbind(rbind(features, c(562, SUBJECT_NAME)),
c(563, ACTIVITY_ID))
return (features)
}
getActivityLabels <- function (){
#read in the list of activities from disk
activityLabels <- read.table(ACTIVITY_LABELS, col.names =
c(ACTIVITY_ID, ACTIVITY_NAME))
#return them
return (activityLabels)
}
setDataLabels <- function(data, labels) {
#apply the column (feature) names to the merged dataset
names(data) <- labels
return (data)
}
limitCols <- function(data) {
#Limit data columns to Mean and Standard deviation
#get the list of columns we are interested in
selectedCols <- grepl(EXPRESION_COLS, names(data))
#add the activity labels to the dataset
data <- inner_join(data, getActivityLabels(), by=ACTIVITY_ID)
#remove the uneeded columns
data <- data[,selectedCols]
return (data)
}
labelActivities <- function(data) {
#tidy up the column names
names(data) <- gsub(EXPRESION_BRACES, NOTHING, names(data))
names(data) <- gsub('^t', 'Time', names(data))
names(data) <- gsub('^f', 'Frequency', names(data))
names(data) <- gsub('Acc', 'Acceleration', names(data))
names(data) <- gsub('GyroJerk', 'AngularAcceleration', names(data))
names(data) <- gsub('Gyro', 'AngularSpeed', names(data))
names(data) <- gsub('Mag', 'Magnitude', names(data))
names(data) <- gsub('-mean', 'Mean', names(data))
names(data) <- gsub('Freq-', 'Frequency-', names(data))
names(data) <- gsub('Freq$', 'Frequency', names(data))
return (data)
}
run_analysis(write.file=T)
run_analysis(write.file=T)
View(data)
names(data) <- gsub(EXPRESION_BRACES, NOTHING, names(data))
names(data) <- gsub('^t', 'Time', names(data))
names(data) <- gsub('^f', 'Frequency', names(data))
names(data) <- gsub('Acc', 'Acceleration', names(data))
names(data) <- gsub('GyroJerk', 'AngularAcceleration', names(data))
names(data) <- gsub('Gyro', 'AngularSpeed', names(data))
names(data) <- gsub('Mag', 'Magnitude', names(data))
names(data) <- gsub('-mean', 'Mean', names(data))
names(data) <- gsub('Freq-', 'Frequency-', names(data))
names(data) <- gsub('Freq$', 'Frequency', names(data))
names(data)
names(data) <- gsub('-std', 'StandardDeviation', names(data))
names(data)
library(dplyr)
library(tidyr)
X_TEST <- 'UCI HAR Dataset/test/X_test.txt'
X_TRAIN <- 'UCI HAR Dataset/train/X_train.txt'
Y_TEST <- 'UCI HAR Dataset/test/Y_test.txt'
Y_TRAIN <- 'UCI HAR Dataset/train/Y_train.txt'
SUB_TEST <- 'UCI HAR Dataset/test/subject_test.txt'
SUB_TRAIN <- 'UCI HAR Dataset/train/subject_train.txt'
FEATURES <- 'UCI HAR Dataset/features.txt'
ACTIVITY_LABELS <- 'UCI HAR Dataset/activity_labels.txt'
CHAR <- 'character'
ACTIVITY_ID <- 'ActivityID'
ACTIVITY_NAME <- 'Activity'
FEATURE_ID <- 'FeatureId'
FEATURE_NAME <- 'Feature'
SUBJECT_NAME <- 'Subject'
EXPRESION_COLS <- '(mean)|(std)|(Subject)'
EXPRESION_BRACES <- '\\(|\\)'
NOTHING <- ''
run_analysis <- function(write.file=FALSE, file.name='TidyData.csv' ) {
#main function combines the traininng and test datasets returns a
#tidy dataset
#saves dataset to file or returns dataset based on user input.
#get the datasets and merge them
data <- mergeDataSets(combineDataSet(X_TEST,X_TRAIN),
combineDataSet(Y_TEST,Y_TRAIN),
combineDataSet(SUB_TEST,SUB_TRAIN))
#combine the X and Y labels for the datasets
data <- setDataLabels(data, getFeatureLabels()$Feature)
#limit the columns in the dataset to the mean and Std Variations
data <- limitCols(data)
# rename the columns to with appropriate names.
data <- labelActivities(data)
# return a dataset containing the mean of the mean/std dev variables
# by activity and subject.
data <- summarise_each(group_by(data, Activity,Subject), funs(mean))
if(write.file){
write.table(data, file=file.name, sep = ',', row.names=F)
}
else{
return(data)
}
}
mergeDataSets <- function(data, labels, subjects) {
# combine the X, Y and subject datasets
mergedData <- cbind(cbind(data, subjects), labels)
return (mergedData)
}
combineDataSet <- function(test_in, train_in){
#Get the Training and test data sets and merge them
test <- read.table(test_in, header = FALSE)
train <- read.table(train_in, header = FALSE)
combined <- rbind(test, train)
rm(test)
rm(train)
return (combined)
}
getFeatureLabels <- function (){
#read in the current list of features from file
features <- read.table(FEATURES, colClasses = c(CHAR), col.names =
c(FEATURE_ID, FEATURE_NAME))
#add our subject and activityid column names
features <- rbind(rbind(features, c(562, SUBJECT_NAME)),
c(563, ACTIVITY_ID))
return (features)
}
getActivityLabels <- function (){
#read in the list of activities from disk
activityLabels <- read.table(ACTIVITY_LABELS, col.names =
c(ACTIVITY_ID, ACTIVITY_NAME))
#return them
return (activityLabels)
}
setDataLabels <- function(data, labels) {
#apply the column (feature) names to the merged dataset
names(data) <- labels
return (data)
}
limitCols <- function(data) {
#Limit data columns to Mean and Standard deviation
#get the list of columns we are interested in
selectedCols <- grepl(EXPRESION_COLS, names(data))
#add the activity labels to the dataset
data <- inner_join(data, getActivityLabels(), by=ACTIVITY_ID)
#remove the uneeded columns
data <- data[,selectedCols]
return (data)
}
labelActivities <- function(data) {
#tidy up the column names
names(data) <- gsub(EXPRESION_BRACES, NOTHING, names(data))
names(data) <- gsub('^t', 'Time', names(data))
names(data) <- gsub('^f', 'Frequency', names(data))
names(data) <- gsub('Acc', 'Acceleration', names(data))
names(data) <- gsub('GyroJerk', 'AngularAcceleration', names(data))
names(data) <- gsub('Gyro', 'AngularSpeed', names(data))
names(data) <- gsub('Mag', 'Magnitude', names(data))
names(data) <- gsub('-mean', 'Mean', names(data))
names(data) <- gsub('-std', 'StandardDeviation', names(data))
names(data) <- gsub('Freq-', 'Frequency-', names(data))
names(data) <- gsub('Freq$', 'Frequency', names(data))
names(data) <- gsub('-', NOTHING, names(data))
return (data)
}
run_analysis(write.file=T)
run_analysis(write.file=T)
names(data)
head(names(data))
write.table(run_analysis(), 'tidyData.txt', row.name=FALSE)
write.table(run_analysis(), 'tidyData.txt', row.name=FALSE, sep=',')
